;code:utf-8
;@title PLAY.ASM
;@note This is a program only on MGSPICO.
;@auther Harumakkin

; MGSDRV https://gigamix.hatenablog.com/entry/mgsdrv/
; KINROU5 https://sakuramail.net/fswold/music.html#muskin
; NDP https://ndp.squares.net/web/

SOUND_DRIVER:
	.MGS		equ	0x0		;; MGSDRV
	.KIN5		equ	0x1		;; KINROU5
	.RES1		equ	0x2		;; (不使用)
	.RES2		equ	0x3		;; (不使用)
	.NDP		equ	0x4		;; NDP

; MGSDRV's sub-routines
MGS:
	; API
	.MUSDATA	equ 0x8000	;; 楽曲データの位置アドレス
	.SYSCK		equ	0x6010	;; 音源の有無を調べ初期化する
	.INITM 		equ	0x6013	;; 演奏を止めてドライバを初期化する
	.PLYST 		equ	0x6016	;; 演奏を開始する
	.INTER		equ	0x601f	;; 割込ルーチンの先頭アドレス
	.MSVST 		equ	0x6022	;; マスタボリウムのセット(A=0が最大)
	.DATCK		equ	0x6028	;; 演奏データのヘッダを調べる
; Kinrou5(MUSICA)'s sub-routines
KINR5:
	; ワークエリア
	.MUSDATA	equ 0x8000	;; 楽曲データの位置アドレス
	.FMSLT		equ	0x6010	;; FM音源のスロット番号。無い場合は０
	.SCCSLT		equ	0x6011	;; SCC音源のスロット番号。無い場合は０
	; API
	.INITAL		equ	0x6020	;; 音源の有無を調べ初期化する
	.MPLAY2		equ	0x6026	;; 演奏を開始する
	.MINTER		equ	0x6029	;; 割込ルーチンの先頭アドレス
	.MSTOP 		equ	0x602C	;; 演奏を止める
	.PLYCHK		equ	0x6032	;; 演奏状態を得る
	.ALLMVO		equ	0x6038	;; マスタボリウムのセット(A=0が最大)
	.GETWORK	equ 0x6044	;; ワークエリアのアドレスを返す
; NDP's sub-routines
NDP:
	.MUSDATA	equ 0x4400	;; 楽曲データの位置アドレス
	; API
	.NDPINI		equ 0xC000	;; ドライバ初期化 (タイマ割り込みフックにドライバを接続)
	.MSTART		equ 0xC003	;; 演奏開始 (ワークエリアをゼロクリアし演奏開始。フックは操作しない)
	.MSTOP		equ 0xC006	;;  演奏停止 (演奏停止してPSGレジスタを初期化。フックは操作しない)
	.INTRPT		equ 0xC009	;; 割り込み処理 (フックに接続せずに自前で割り込みルーチンを呼ぶ際に使用)
	.U_ADR		equ 0xC00C	;;  (※)曲データ開始アドレス設定 (引数で指定。デフォルトの04000Hなら設定不要)
	.U_OFF1		equ 0xC00F	;; (※)Ch.A 一時ミュート (ミュートするフレーム数を引数で指定 [2～254/1=解除/255=常時ミュート])
	.U_OFF2		equ 0xC012	;; (※)Ch.B 〃
	.U_OFF3		equ 0xC015	;; (※)Ch.C 〃
	.U_MV		equ 0xC018	;;   (※)マスター音量オフセット (引数で渡した値を音量値から減算する)
	.U_MFO		equ 0xC01B	;;  (※)フェードアウト (引数で渡したフレーム数ずつフェードアウト)
	.U_MFI		equ 0xC01E	;;  (※)フェードインしながら演奏開始 (引数で渡したフレーム数ずつフェードイン)
	.U_SE		equ 0xC021	;;   (※)効果音発音 (効果音データのアドレスを引数で指定)
	.CH1OFF		equ 0xC024	;; Ch.A 一時ミュート (D←ミュートするフレーム数 [2～254/1=解除/255=常時ミュート])
	.CH2OFF		equ 0xC027	;; Ch.B 〃
	.CH3OFF		equ 0xC02A	;; Ch.C 〃
	.MVSET		equ 0xC02D	;;  マスター音量オフセット (A←音量値から減算する値)
	.MFOSET		equ 0xC030	;; フェードアウト (A←各段階のフレーム数)
	.RDSTAT		equ 0xC033	;; 演奏状態→A (0:停止中 1:演奏中)
	.RDENDT		equ 0xC036	;; 各トラックの演奏が終端まで達したかどうか→A (0000321Rのビットフィールド)
	.RDLOOP		equ 0xC039	;; 曲がループした回数→A (曲データの+0BHを見て無限ループしない曲なら演奏終了時に255が返る)
	.ADRSET		equ 0xC03C	;; 曲データ開始アドレス設定 (DE←アドレス。デフォルトの04000Hなら設定不要) 
	.MPLAYF		equ 0xC03F	;; フェードインしながら演奏開始 (A←各段階のフレーム数)
	.SEPLAY		equ 0xC042	;; 効果音発音 (DE←効果音データのアドレス)
	.VSET		equ 0xC045	;;   音色データをドライバに反映 (HL←音色定義データのアドレス)
	.SYSVER		equ 0xC048	;; ドライバのバージョン番号→HL (L=小数点以下、H=整数部。整数部が0なら0.9として扱う)
	.NDPOFF		equ 0xC04B	;; ドライバ終了 (タイマ割り込みフックからドライバを切り離して発音停止)
	.SETHF		equ 0xC04E	;;  タイマ割り込みフック接続フラグ←A
	.KSSPLY		equ 0xC051	;; 退避したH.TIMIをRETで潰して演奏開始 (KSSプレイヤー用)

HSZ:
	.ST16MS		equ	0x0039
	.WT16MS		equ	0x003A
; 
ADDR_IF_PP		equ 0x4300	;; Pleyer - Pico 間の通信領域先頭アドレス
PP:
	.REQ_NONE	equ 0x00
	.REQ_STOP	equ 0x01
	.REQ_PLAY	equ 0x02
	.REQ_CLS	equ 0x03
	.REQ_FDOT	equ 0x04	;; フェードアウト開始

PSTS:
	.NONE		equ 0x00
	.IDLE		equ 0x01	;; 何もしていない
	.PLAYING	equ 0x02	;; 演奏中
	.FINISH		equ 0x03	;; 演奏が完了した
	.FADEOUT	equ 0x04	;; フェードアウト中

; MSX standard
MSXSTD:
	.JIFFY		equ 0xFC9E	;; 1/60秒ごとにカウントアップするWORD値

; ------------------------------------------------------------------------------
; Playerアプリケーションのエントリ部。
org	0x4000
PLAYER:
	.begin
		call	INIT_CALLS
	.f_init equ $+1
		call	F_MGS_INIT
	.f_mute equ $+1
		call	F_MGS_MUTE
		call	F_SETUP_IF_PP
		call	F_RESET_JIFFY
	.mainloop
		call	HSZ.ST16MS
		call	F_CHECK_REQ
		call	F_CHECK_LAPS
		call	F_FADEOUT
	.f_inter equ $+1
		call	MGS.INTER
		call	F_INC_JIFFY
		call	HSZ.WT16MS
		jr		.mainloop

INIT_CALLS:
	; enum class MUSICDATA : uint8_t	{MGS=0, KIN5=1, TGF=2, VGM=3, NDP=4};
	.begin
		ld		A, (IF_PP.request_driver)
		or		A
		jr		nz, .@1
		; setup for MGSDRV
		; 	(do nothing)
		ret
	.@1
		dec		A
		jr		nz, .@2
		; setup for KINROU5
		; PLAYER:
		ld		HL, F_KINR5_INIT
		ld		(PLAYER.f_init), HL
		ld		HL, F_KINR5_MUTE
		ld		(PLAYER.f_mute), HL
		ld		HL, KINR5.MINTER
		ld		(PLAYER.f_inter), HL
		; F_CHECK_REQ:
		ld		HL, F_KINR5_MUTE
		ld		(F_CHECK_REQ.f_mute), HL
		ld		HL, F_KINR5_STOP
		ld		(F_CHECK_REQ.f_stop), HL
		ld		HL, F_KINR5_MAX_VOLUNE
		ld		(F_CHECK_REQ.f_max_volume), HL
		ld		HL, F_KINR5_PLAY
		ld		(F_CHECK_REQ.f_play), HL
		; F_CHECK_LAPS:
		ld		HL, F_CHECK_LAPS.get_kinr5
		ld		(F_CHECK_LAPS.f_get_count), HL
		; F_FADEOUT:
		ld		HL, F_KINR5_SET_VOLUNE
		ld		(F_FADEOUT.f_set_volume), HL
		ld		HL, F_KINR5_MUTE
		ld		(F_FADEOUT.f_mute), HL
		ld		HL, F_KINR5_STOP
		ld		(F_FADEOUT.f_stop), HL
		;
		ret
	.@2
		dec		A
		dec		A
		dec		A
		jr		nz, .@3
		; setup for NDP
		; PLAYER:
		ld		HL, F_NDP_INIT
		ld		(PLAYER.f_init), HL
		ld		HL, F_NDP_MUTE
		ld		(PLAYER.f_mute), HL
		ld		HL, NDP.INTRPT
		ld		(PLAYER.f_inter), HL
		; F_CHECK_REQ:
		ld		HL, F_NDP_MUTE
		ld		(F_CHECK_REQ.f_mute), HL
		ld		HL, F_NDP_STOP
		ld		(F_CHECK_REQ.f_stop), HL
		ld		HL, F_NDP_MAX_VOLUNE
		ld		(F_CHECK_REQ.f_max_volume), HL
		ld		HL, F_NDP_PLAY
		ld		(F_CHECK_REQ.f_play), HL
		; F_CHECK_LAPS:
		ld		HL, F_CHECK_LAPS.get_ndp
		ld		(F_CHECK_LAPS.f_get_count), HL
		; F_FADEOUT:
		ld		HL, F_NDP_SET_VOLUNE
		ld		(F_FADEOUT.f_set_volume), HL
		ld		HL, F_NDP_MUTE
		ld		(F_FADEOUT.f_mute), HL
		ld		HL, F_NDP_STOP
		ld		(F_FADEOUT.f_stop), HL
		;
		ret
	.@3
		jp		.@3


;------------------------------------------------------------------------------
; MGSDRVを操作する処理
;------------------------------------------------------------------------------
F_MGS_INIT:
	.begin
		call	MGS.SYSCK
		ld		(IF_PP.work_mib_addr), IX
		ld		(IF_PP.work_track_top), IY
		ld		(IF_PP.work_track_size), BC
		call	MGS.INITM
		ret
F_MGS_PLAY:
	.begin
		ld		DE, MGS.MUSDATA	; 演奏データのアドレス
		ld		B, 0xff
		ld		HL, 0xffff
		call	MGS.PLYST
		ret

F_MGS_STOP:
	.begin
		call	MGS.INITM
		ret

F_MGS_SET_VOLUNE:
	.begin
		ld		(WORKAREA.master_volume), A
		ld		B, 0
		call	MGS.MSVST
		ret

F_MGS_MAX_VOLUNE:
	.begin
		xor		A		; 最大音量
		ld		(WORKAREA.master_volume), A
		ld		B, 0
		call	MGS.MSVST
		ret

F_MGS_MUTE:
	.begin
		ld		A, 15	; 最小音量
		ld		(WORKAREA.master_volume), A
		ld		B, 1	; 即時
		call	MGS.MSVST
		ret

;------------------------------------------------------------------------------
; KINROU5を操作する処理
;------------------------------------------------------------------------------
F_KINR5_INIT:
	.begin
		call	KINR5.INITAL
		ld		HL, KINR5.FMSLT
		ld		(IF_PP.work_mib_addr), HL
		call	KINR5.GETWORK
		ld		(IF_PP.work_track_top), IX
		ld		(IF_PP.work_track_size), HL
		ret

F_KINR5_PLAY:
	.begin
		ld		IX, KINR5.MUSDATA
		ld		E, (IX+1)		; 開始アドレス
		ld		D, (IX+2)
		ld		HL, 0x8007		; 格納場所
		ld		A, 0x00			; 0=無限ループ
		call	KINR5.MPLAY2
		ret

F_KINR5_STOP:
	.begin
		call	KINR5.MSTOP
		ret

F_KINR5_SET_VOLUNE:
	.begin
		ld		(WORKAREA.master_volume), A
		call	KINR5.ALLMVO
		ret

F_KINR5_MAX_VOLUNE:
	.begin
		xor		A			; 0=最大音量
		ld		(WORKAREA.master_volume), A
		call	KINR5.ALLMVO
		ret

F_KINR5_MUTE:
	.begin
		ld		A, 15		; 15=最小音量
		ld		(WORKAREA.master_volume), A
		call	KINR5.ALLMVO
		ret

;------------------------------------------------------------------------------
; NDP を操作する処理
;------------------------------------------------------------------------------
F_NDP_INIT:
	.begin
		; NDP v1.00 では、.INTRPTによる使用であっても、下記の呼び出しが必要だった
		; が、v1.02以降では必要なくなったのでコメント化しておく
		; xor		A
		; call	NDP.SETHF
		; call	NDP.NDPINI
		ret

F_NDP_PLAY:
	.begin
		; 曲データ先頭アドレスの設定
		ld		DE, NDP.MUSDATA
		call	NDP.ADRSET
		; 演奏開始
		call	NDP.MSTART
		ret

F_NDP_STOP:
	.begin
		call	NDP.MSTOP
		ret

F_NDP_SET_VOLUNE:
	.begin
		ld		(WORKAREA.master_volume), A
		call	NDP.MVSET
		ret

F_NDP_MAX_VOLUNE:
	.begin
		xor		A			; 0=最大音量
		ld		(WORKAREA.master_volume), A
		call	NDP.MVSET
		ret

F_NDP_MUTE:
	.begin
		ld		A, 15		; 15=最小音量
		ld		(WORKAREA.master_volume), A
		call	NDP.MVSET
		ret

;------------------------------------------------------------------------------
; 共通処理
;------------------------------------------------------------------------------
F_RESET_JIFFY:
		ld		HL, 0x0000
		ld		(MSXSTD.JIFFY), HL
		ret

F_INC_JIFFY:
		ld		HL, (MSXSTD.JIFFY)
		inc		HL
		ld		(MSXSTD.JIFFY), HL
		ret

F_SETUP_IF_PP:
; Player側のVerを格納
; 準備OKサインの記載
	.set_ver
		ld		HL, 0x0102	; Ver 1.2
		ld		(IF_PP.playerd_ver_L), HL
	.set_magic_spell
		ld		C, 4
		ld		B, 0
		ld		DE, IF_PP.magic_spell
		ld		HL, .orgstr
		ldir
	.end
		ret
	.orgstr
		db		"POK."

;---------------------------------------------------------
F_CHECK_REQ:
; Pico側のコマンドを待ち、その通りに実行する。
	.begin
		ld		A, (IF_PP.request_from_pico)
		ld		HL, IF_PP.request_res
		cp		(HL)
		ret		z
	.@1
		cp		PP.REQ_STOP
		jr		nz, .@2
	.f_mute equ $+1
		call	F_MGS_MUTE
	.f_stop equ $+1
		call	F_MGS_STOP
		ld		A, PSTS.IDLE
		ld		(IF_PP.status_of_player), A
		jr		.pre_end
	.@2
		cp		PP.REQ_PLAY
		jr		nz, .@3
	.f_max_volume equ $+1
		call	F_MGS_MAX_VOLUNE			; 最大音量
	.f_play equ $+1
		call	F_MGS_PLAY
		xor		A
		ld		(IF_PP.laps), A
		ld		A, PSTS.PLAYING
		ld		(IF_PP.status_of_player), A
		jr		.pre_end
	.@3
		cp		PP.REQ_CLS
		jr		nz, .@4
		ld		A, PSTS.NONE
		ld		(IF_PP.status_of_player), A
		jr		.pre_end
	.@4
		cp		PP.REQ_FDOT
		jr		nz, .@5
		ld		A, (IF_PP.status_of_player)
		cp		PSTS.PLAYING
		ret		nz
		xor		A
		ld		(WORKAREA.fader_cnt), A
		ld		A, (MSXSTD.JIFFY)
		ld		(WORKAREA.old_jiffy), A
		ld		A, PSTS.FADEOUT
		ld		(IF_PP.status_of_player), A
		jr		.pre_end
	.@5
	.pre_end
		ld		A, (IF_PP.request_from_pico)
		ld		(IF_PP.request_res), A
	.end
		ret

;---------------------------------------------------------
F_CHECK_LAPS:
	.begin
; 再生していない時はチェックしない
		ld		A, (IF_PP.status_of_player)
		cp		PSTS.FADEOUT
		ret		z
		cp		PSTS.PLAYING
		ret		nz
; 再生回数をPICOへ
	.f_get_count equ $+1
		call	.get_mgs
		ld		(IF_PP.laps), A
		ret
;
	.get_mgs
		ld		IX, (IF_PP.work_mib_addr)
		ld		A, (IX+5)		;	MIB.LOOPCT	
		ret
	.get_kinr5
		call	KINR5.PLYCHK
		ld		A, L
		ret
	.get_ndp
		call	NDP.RDLOOP		; roop count -> A
		ret

;---------------------------------------------------------
F_FADEOUT:
	.begin
		ld		A, (IF_PP.status_of_player)
		cp		PSTS.FADEOUT
		ret		nz
		; 1/60 sec 以上経過している？
		ld		A, (MSXSTD.JIFFY)
		ld		HL, WORKAREA.old_jiffy
		cp		(HL)
		ret		z
		ld		(HL), A

		ld		A, (WORKAREA.fader_cnt)
		inc		A
		cp		17				; 1/60 * 17 = 0.27sec, 0.27*15 = 4secフェード
		jr		z, .@1
		ld		(WORKAREA.fader_cnt), A
		ret
	.@1
		xor		A
		ld		(WORKAREA.fader_cnt), A
		ld		A, (WORKAREA.master_volume)
		inc		A
		cp		16
		jr		z, .stop_playing
	.f_set_volume equ $+1
		call	F_MGS_SET_VOLUNE
		ret
	.stop_playing
	.f_mute equ $+1
		call	F_MGS_MUTE
	.f_stop equ $+1
		call	F_MGS_STOP
		ld		A, PSTS.FINISH
		ld		(IF_PP.status_of_player), A
		ret


;---------------------------------------------------------
WORKAREA:
	.master_volume		ds	1	; 音量(0=最大、15=最小)
	.fader_cnt			ds	1	; 
	.old_jiffy			ds	1	;

;---------------------------------------------------------
org ADDR_IF_PP
IF_PP:	;; IF_PLAYER_PICO
	.magic_spell		ds	4	; +00 : "POK."
	.playerd_ver_L		ds	1	; +04 : Playersバージョン(L)
	.playerd_ver_H		ds	1	; +05 : Playersバージョン(H)
	.request_from_pico	ds	1	; +06 : Pico側から指示を受ける
	.request_res		ds	1	; +07 : Pico側から指示を実行したことを示す（.request_from_picoのコピーを格納することで完了を示す）
	.status_of_player	ds	1	; +08 : Players側の状態
	.work_mib_addr		ds	2	; +09 : MGSDRV の MIB 領域へのアドレス
	.work_track_top		ds	2	; +11 : トラックワークエリアの先頭アドレス
	.work_track_size	ds	2	; +13 : トラックワークエリアの1トラック分のバイト数
	.laps				ds	1	; +15 : 再生回数（1回目の再生中は1、2回目で2になる。また、status_of_playerがPLAYING以外のときは不定値）
	.request_driver		ds	1	; +16 : 使用するドライバーの指示を受ける(SOUND_DRIVER.MGS等）

